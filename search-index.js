var searchIndex = JSON.parse('{\
"rendering":{"doc":"","t":[6,17,11,0,0,0,0,0,0,11,11,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,3,3,3,3,13,3,13,4,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,3,3,3,0,12,0,10,10,10,12,0,10,12,0,0,10,12,12,12,8,10,10,10,10,11,11,10,3,11,11,11,11,11,12,11,11,11,11,3,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,3,11,11,11,11,12,11,11,11,11,3,11,11,11,12,11,11,11,11,11,12,12,12,11,18,18,3,6,18,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,6,5,5,5,5,5,5,5,4,13,13,13,13,13,11,11,11,0,11,0,5,0,0,11,11,11,0,11,17,17,17,17,17,3,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,3,11,11,11,11,12,11,12,11,11,11,12,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,11,11,11,11,11,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,11,11,5,11,11,11,11,12,11,11,11,11,12,5,5,5,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12,12,12,3,13,3,13,3,13,4,3,13,3,13,3,13,11,11,11,12,12,12,12,5,0,11,11,11,5,5,5,5,5,11,11,0,11,11,0,0,0,5,5,0,12,12,12,12,11,0,11,12,12,11,11,11,11,0,12,12,12,12,12,12,3,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,3,5,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,5,5,5,5,5,5,5,5,17,5,5,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,5,5,5,5,5,5,5,12,12,8,8,16,8,6,8,8,16,8,8,3,3,3,11,11,11,11,11,11,10,11,10,11,11,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,5,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,5,11,12,10,11,11,11,11,10,5,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,12,11,11,12,11,11,12,11,11,12,11,11,11,11,11,12,11,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,3,3,13,13,4,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,5,11,11,5,5,12,12,11,11,5,5,5,12,12,12,5,5,5,5,5,5,5,11,11,11,12,12,11,5],"n":["Float","PI","add","bvh","camera","colour","colour_matrix","colourmap","d_coefficients","div","from","from_obj","from_radiance","from_simple_model","image","interaction","material","mul","primitive","primitive_samplers","rand","ray","ray_tracer","samplers","scene","sub","triangle","BoundingVolumeTree","BucketInfo","FlatNode","Interior","Interior","Leaf","Leaf","Node","ObjectInfo","axis","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","bounds","bounds","bounds","centroid","children","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count","default","first_prim_offset","flatten_node","from","from","from","from","from","from","from","get_bucket_index","index","intersect","into","into","into","into","into","into","into","is_leaf","n_prims","n_prims","new","new","new_interior","new_leaf","next","nodes","recursive_build","split_axis","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unobstructed_distance","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","Camera","CameraSample","Film","View","camera_trait","field_of_view","film","film_resolution","gen_random_sample","gen_ray","p_film","pinhole","pixel_from_ray","resolution","sample","view","view","view_direction","view_point","view_up","Camera","film_resolution","gen_random_sample","gen_ray","pixel_from_ray","pixel_index","pixel_index","view","Film","aspect_ratio","borrow","borrow_mut","from","into","resolution","try_from","try_into","type_id","vzip","Pinhole","borrow","borrow_mut","film","film_distance","film_resolution","from","gen_random_sample","gen_ray","into","new","pixel_from_ray","try_from","try_into","type_id","u","view","view","vzip","CameraSample","borrow","borrow_mut","from","into","p_film","try_from","try_into","type_id","vzip","View","borrow","borrow_mut","default","field_of_view","from","into","try_from","try_into","type_id","view_direction","view_point","view_up","vzip","BLACK","ONE","RGBSpectrum","Spectrum","WHITE_EFFICACY","add","add_assign","blue","borrow","borrow_mut","clone","clone_into","default","div","div","div_assign","div_assign","eq","fmt","fmt","from","gray","green","into","is_black","luminance","max","mul","mul","mul_assign","mul_assign","ne","normalize","one","powf","powi","radiance","red","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","vzip","zero","ColourMatrix","average_matrix","colour_matrix_to_luminance","colour_matrix_to_radiance","read_colour_matrix","read_matrix","save_colour_matrix","save_matrix","Colourmap","Inferno","Magma","Plasma","Radiance","Viridis","borrow","borrow_mut","from","inferno","into","magma","map_linear_colour","plasma","radiance","try_from","try_into","type_id","viridis","vzip","INFERNO_COLOURMAP","MAGMA_COLOURMAP","PLASMA_COLOURMAP","RADIANCE_COLOURMAP","VIRIDIS_COLOURMAP","DCFactory","borrow","borrow_mut","calc_dc","count_specular_bounce","default","from","into","limit_weight","max_depth","n_ambient_samples","reinhart","trace_ray","try_from","try_into","type_id","vzip","ObjTriangle","borrow","borrow_mut","from","into","normals","process","textures","try_from","try_into","type_id","vertices","vzip","RadianceReader","borrow","borrow_mut","consume_char","consume_dielectric","consume_glass","consume_light","consume_metal","consume_mirror","consume_non_white","consume_object","consume_plastic","consume_polygon","consume_source","consume_sphere","consume_token","consume_whitespace","current_char_index","default","error_here","from","get_modifier_index","into","is_done","line","modifiers","reach_next_token","try_from","try_into","type_id","vzip","SimpleModelReader","borrow","borrow_mut","build_scene","default","from","get_modifier_index","into","modifiers","push_substance","substance_to_material","try_from","try_into","type_id","vzip","ImageBuffer","borrow","borrow_mut","colour_to_rgbe","diff","from","from_file","from_pixels","height","index","index_mut","into","new","pixels","rgbe_to_colour","rusty_frexp","rusty_ldexp","save_falsecolour","save_hdre","save_log_falsecolour","try_from","try_into","type_id","vzip","width","Interaction","borrow","borrow_mut","clone","clone_into","default","from","geometry_shading","interpolate_normal","into","point","to_owned","transform","try_from","try_into","type_id","vzip","wo","0","0","Dielectric","Dielectric","Glass","Glass","Light","Light","Material","Metal","Metal","Mirror","Mirror","Plastic","Plastic","borrow","borrow_mut","colour","colour","colour","colour","colour","cos_and_n","dielectric","emits_direct_light","emits_light","eval_bsdf","eval_mirror_bsdf","fresnel_reflectance","fresnel_te","fresnel_tm","fresnel_transmission_dir","from","get_possible_paths","glass","id","into","light","metal","mirror","mirror_bsdf","mirror_direction","plastic","refraction_index","refraction_index","roughness","roughness","sample_bsdf","specular","specular_only","specularity","specularity","try_from","try_into","type_id","vzip","ward","0","0","0","0","0","0","Dielectric","borrow","borrow_mut","colour","colour","eval_bsdf","from","get_possible_paths","id","into","refl_trans","refraction_index","try_from","try_into","type_id","vzip","Glass","any_transmission","borrow","borrow_mut","colour","colour","eval_bsdf","from","get_possible_paths","id","into","refl_trans","refraction_index","try_from","try_into","type_id","vzip","0","Light","borrow","borrow_mut","colour","from","id","into","try_from","try_into","type_id","vzip","Metal","borrow","borrow_mut","colour","colour","eval_bsdf","from","id","into","roughness","sample_bsdf","specularity","try_from","try_into","type_id","vzip","0","Mirror","borrow","borrow_mut","colour","eval_bsdf","from","get_possible_paths","id","into","try_from","try_into","type_id","vzip","Plastic","borrow","borrow_mut","colour","colour","eval_bsdf","from","id","into","roughness","sample_bsdf","specularity","try_from","try_into","type_id","vzip","cos_and_n","eval_mirror_bsdf","fresnel_reflectance","fresnel_te","fresnel_tm","fresnel_transmission_dir","mirror_bsdf","mirror_direction","LOW_ROUGHNESS","evaluate_ward_anisotropic","sample_ward_anisotropic","Cylinder","Primitive","Source","Sphere","Triangle","borrow","borrow_mut","clone","clone_into","direction","from","id","intersect","into","sample_direction","simple_intersect","solid_angle_pdf","to_owned","try_from","try_into","type_id","vzip","world_bounds","0","0","0","0","sample_sphere_surface","sample_triangle_surface","source_direction","source_solid_angle_pdf","sphere_direction","sphere_solid_angle_pdf","triangle_direction","triangle_solid_angle_pdf","uniform_cone_pdf","0","0","CryptoRng","Distribution","Item","IteratorRandom","RandGen","Rng","RngCore","Seed","SeedableRng","SliceRandom","SmallRng","StdRng","ThreadRng","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","fill","fill_bytes","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_entropy","from_rng","from_rng","from_rng","from_seed","from_seed","from_seed","gen","gen_bool","gen_range","gen_ratio","get_rng","into","into","into","map","ne","ne","next_u32","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","next_u64","partial_shuffle","random","read","rng","sample","sample","sample_iter","sample_iter","seed_from_u64","shuffle","thread_rng","to_owned","to_owned","to_owned","try_fill","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Ray","borrow","borrow_mut","clone","clone_into","colour","default","depth","direction","from","geometry","get_n_ambient_samples","get_triad","interaction","into","origin","refraction_index","to_owned","transform","try_from","try_into","type_id","value","vzip","RayTracer","RayTracerHelper","borrow","borrow","borrow_mut","borrow_mut","count_specular_bounce","default","default","from","from","get_global_illumination","get_local_illumination","into","into","limit_weight","max_depth","n_ambient_samples","n_shadow_samples","nodes","rays","render","sample_light","sample_light_array","trace_ray","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","local_to_world","sample_cosine_weighted_horizontal_hemisphere","uniform_sample_disc","uniform_sample_hemisphere","uniform_sample_horizontal_disc","uniform_sample_sphere","uniform_sample_triangle","Object","Scene","Solar","Visible","Wavelengths","accelerator","add_from_obj","add_from_obj_source","add_perez_sky","back_material_index","back_material_indexes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_accelerator","cast_ray","clone","clone_into","count_all_lights","default","distant_lights","from","from","from","from_radiance","from_radiance_source","from_simple_model","front_material_index","front_material_indexes","into","into","into","lights","materials","new","normals","primitive","push_material","push_object","rebuild_accelerator","sky","sky_colour","to_owned","triangles","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unobstructed_distance","vzip","vzip","vzip","Intersection","Triangle","baricentric_coorinates","borrow","borrow_mut","cross","dot","e1","e2","from","into","mesh_sphere","mesh_triangle","new_info","normal","point","side","simple_triangle_intersect","simple_triangle_intersect_pack","triangle_area","triangle_intersect","triangle_intersect_pack","triangle_pack_baricentric_coorinates","triangle_solid_angle_pdf","try_from","try_into","type_id","u","v","vzip","world_bounds"],"q":["rendering","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::bvh","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::bvh::Node","","rendering::camera","","","","","","","","","","","","","","","","","","","","rendering::camera::camera_trait","","","","","","","","rendering::camera::film","","","","","","","","","","","rendering::camera::pinhole","","","","","","","","","","","","","","","","","","","rendering::camera::sample","","","","","","","","","","rendering::camera::view","","","","","","","","","","","","","","rendering::colour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::colour_matrix","","","","","","","","rendering::colourmap","","","","","","","","","","","","","","","","","","","","rendering::colourmap::inferno","rendering::colourmap::magma","rendering::colourmap::plasma","rendering::colourmap::radiance","rendering::colourmap::viridis","rendering::d_coefficients","","","","","","","","","","","","","","","","","rendering::from_obj","","","","","","","","","","","","","rendering::from_radiance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::from_simple_model","","","","","","","","","","","","","","","rendering::image","","","","","","","","","","","","","","","","","","","","","","","","","rendering::interaction","","","","","","","","","","","","","","","","","","rendering::material","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::material::Material","","","","","","rendering::material::dielectric","","","","","","","","","","","","","","","","rendering::material::glass","","","","","","","","","","","","","","","","","rendering::material::light","","","","","","","","","","","","rendering::material::metal","","","","","","","","","","","","","","","","rendering::material::mirror","","","","","","","","","","","","","","rendering::material::plastic","","","","","","","","","","","","","","","","rendering::material::specular","","","","","","","","rendering::material::ward","","","rendering::primitive","","","","","","","","","","","","","","","","","","","","","","","rendering::primitive::Primitive","","","","rendering::primitive_samplers","","","","","","","","","rendering::rand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::ray","","","","","","","","","","","","","","","","","","","","","","","","rendering::ray_tracer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::samplers","","","","","","","rendering::scene","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rendering::triangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A struct that is instrumental for building the  …","The axis in which this was split. This value should not be …","","","","","","","","","","","","","","","","","","","","The Bounding Box of this node","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns an <code>Option&lt;usize&gt;</code>, containing the index of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The number of primitives in the node. Interior Nodes have …","","","","","The ‘next’ node to check. This is the equivalent to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if a ray can travel a certain distance without …","","","","","","","","","","","Used for getting a sample ray from the [<code>Camera</code>]","","","","Horizontal angle of the Field of View (i.e., frustum) in …","","Gets the film resolution (width,height) in pixels","Generates a random CameraSample","Generates a ray that will go through the View Point and a …","The position (x,y) within the [<code>Film</code>]","","","Contains the number of Pixels in Width and Height","","","Borrows the view","","","","","Gets the film resolution (width,height) in pixels","Generates a random CameraSample","Generates a ray that will go through the View Point and a …","","","","Borrows the view","","return the Width/height ratio","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Contains the number of Pixels in Width and Height","","","","","","","","","","","Returns the argument unchanged.","Generates a random CameraSample","Generates a ray that will go through the View Point and a …","Calls <code>U::from(self)</code>.","","","","","","A <code>Vector3D</code> which is the result of …","","","","Used for getting a sample ray from the [<code>Camera</code>]","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The position (x,y) within the [<code>Film</code>]","","","","","","","","","Horizontal angle of the Field of View (i.e., frustum) in …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The standard Luminious Efficacy of equal white light energy","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a new Spectrum full of equal values <code>v</code>","","Calls <code>U::from(self)</code>.","Checks whether <code>Spectrum::BLACK == self</code>","Calculates a weighted average of RGB colours, returning a …","Gets the maximum of the R, G, and B values","","","","","","Scales the chanels in order to make the radiance equals to …","","","","Calculates a weighted average of RGB colours, returning a …","","","","","","","","","","","","","","","","","","","The options of Colourmap to choose from when …","One of the colourmaps that is “analytically be perfectly ","One of the colourmaps that is “analytically be perfectly ","One of the colourmaps that is “analytically be perfectly ","Emulates the default Radiance’s Colourmap. ","The deafult Colourmap in this library.  Also, one of the …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Radiance’s standard falsecolour colourmap","","A structure meant to calculate DC matrices for Climate …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Recursively traces a ray until it excedes the <code>max_depth</code> of …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Consumes a Light material","Consumes a Light material","Consumes a Light material","Consumes a Metal material","Consumes a Light material","","Consume object","Consumes a Plastic material","Consumes a polygon","Consumes a sphere","Consumes a sphere    ","Retrieves a token and advances.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Advances until reaching the next token","","","","","An auxiliar structure only meant to create a Scene from a …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A list of the modifiers already in the model","Adds a Substance to the Scene, checking if it has been …","Transformsa a SimpleModel Substance into a Material","","","","","A buffer with all the physical values in the image (i.e., …","","","","Gets the absolute difference between two <code>ImageBuffer</code>","Returns the argument unchanged.","Creates a new empty <code>ImageBuffer</code> from a File","Creates a new empty <code>ImageBuffer</code>","Number of rows","","","Calls <code>U::from(self)</code>.","Creates a new empty <code>ImageBuffer</code>","All the pixels, iterating from top to bottom, left to right","","Equivalent to C’s <code>frexp</code> function","Equivalent to C’s <code>ldexp</code> function","Creates a new version of an image, but in (linear) …","Saves the image in HDRE format","Creates a new version of an image, but in (log10) …","","","","","Number of columns","The data for a SurfaceInteraction]","","","","","","Returns the argument unchanged.","Stores the shading information based on pure geometry","","Calls <code>U::from(self)</code>.","The <code>Point3D</code> of the interaction","","","","","","","The outgoing direction at the interaction. This is the …","","","","","","","A mirror material","","","Information required for modelling Radiance’s Metal and …","","A mirror material","","Information required for modelling Radiance’s Plastic …","","","","Retrieves the Colour of the material. This will usually …","","","","","Calculates the parameters necessary for calculating the …","","Should this material be tested for direct illumination?    ","Should this material emits light    ","Evaluates a BSDF based on an input and outpt directions","Evaluates the mirror BSDf","","Fresnel Coefficient for TE-Polarized Light (i.e., …","Fresnel Coefficient for TM-Polarized Light (i.e., …","Calculates the direction of the transmision","Returns the argument unchanged.","","","Returns an id, for debugging and error reporting purposes","Calls <code>U::from(self)</code>.","","","","Calculates the Mirror BSDF and modifies the given ray so …","Calculates the purely specular reflection direction.","","","","","","Samples the bsdf (returned by modifying the given <code>Ray</code>). …","","Does this material scatter (e.g., like <code>Plastic</code>) or does it …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Gets the Reflected and Transmitted BSDF values","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","A mirror material","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Information required for modelling Radiance’s Metal and …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","A mirror material","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Information required for modelling Radiance’s Plastic …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Calculates the parameters necessary for calculating the …","Evaluates the mirror BSDf","","Fresnel Coefficient for TE-Polarized Light (i.e., …","Fresnel Coefficient for TM-Polarized Light (i.e., …","Calculates the direction of the transmision","Calculates the Mirror BSDF and modifies the given ray so …","Calculates the purely specular reflection direction.","","Evaluates a Ward BSDF","Samples a Ward BSDF, changing the direction of a given …","","","","","","","","","","","Returns the argument unchanged.","The name of the <code>Primitive</code>. Useful for debugging.","Intersects an object with a [<code>Ray3D]</code> (IN WORLD COORDINATES) …","Calls <code>U::from(self)</code>.","","Intersects an object with a [<code>Ray3D]</code> (IN WORLD COORDINATES) …","","","","","","","Gets a <code>BBox3D</code> bounding the primitive, in world’s …","","","","","","","It is always in the same direction","","","","","","Calculates the probability of hitting a","","","A marker trait used to indicate that an <code>RngCore</code> or …","Types (distributions) that can be used to create a random …","The element type.","Extension trait on iterators, providing random sampling …","","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Extension trait on slices, providing random mutation and …","A small-state, fast non-crypto PRNG","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","","","","","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","","","","","","","","","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","","","Create a new PRNG using the given seed.","","","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Gets a random number generator for Montecarlo estimations","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a distribution of values of ‘S’ by mapping the …","","","Return the next random <code>u32</code>.","","","","Return the next random <code>u64</code>.","","","","Shuffle a slice in place, but exit early.","Generates a random value using the thread-local random …","","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Sample a new value, using the given distribution.","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Shuffle a mutable slice in place.","Retrieve the lazily-initialized thread-local random number …","","","","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","","","","","","","","","","","","Represents a ray (of light?) beyond pure geometry. It …","","","","","","","","","Returns the argument unchanged.","Direction and position","Get ","Returns the Intersection point, Normal, e1, e2","Contains the information about the last hit.","Calls <code>U::from(self)</code>.","","index of refraction of the current medium","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calculates the luminance produced by the direct sources in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Sends a <code>shadow_ray</code> towards a <code>light</code>. Returns <code>None</code> if the …","","Recursively traces a ray","","","","","","","","","Transforms a Point from Local Coordinates (defined by the …","Gets a random <code>Vector3D</code>, distributed according to <code>cos(theta)</code>…","","","","","","","","","","","The acceleration structure that helps trace rays.","Reads a Radiance file and builds a scene.","Creates a scene from a slice of bytes read from a Radiance …","Adds the elements describing a Perez sky to the scene. The …","","","","","","","","","","Casts a <code>Ray3D</code> and returns an <code>Option&lt;usize&gt;</code> indicating the …","","","Returns the number of total lights; that is, those in the …","","A vector of <code>Light</code> objects that are considered sources of …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reads a Radiance file and builds a scene.","Creates a scene from a slice of bytes read from a Radiance …","Creates a new <code>Scene</code> from a <code>SimpleModel</code>. The <code>enum</code> …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A vector of <code>Light</code> objects that are considered sources of …","The materials in the scene","Creates an empty scene","The normal of each vertex of each triangle.","","Pushes a <code>Material</code> to the <code>Scene</code> and return its position in …","Pushes a <code>Primitive</code> object into the <code>Scene</code>","Builds the accelerator","A function returning the diffuse Sky brightness (i.e., …","The colour of the sky, normalized","","The Triangles in the scene that are not tested directly …","","","","","","","","","","Checks whether a <code>Ray3D</code> can travel a certain distance …","","","","","The smallest definition of a Triangle I could think of","Tests the intersection between a <code>Ray3D</code> and a <code>Triangle</code>. …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Transforms a <code>Triangle3D</code> and transforms it into a …","","","","","Intersects a <code>Ray3D</code> and a <code>Triangle</code>, returning the <code>Point3D</code> of","Intersects a <code>Ray3D</code> and a pack (i.e., <code>&amp;[]</code>) of <code>Triangle</code>, …","","Intersects a <code>Ray3D</code> and a <code>Triangle</code>, returning the …","Intersects a <code>Ray3D</code> and a pack (i.e., <code>&amp;[]</code>) of <code>Triangle</code>, …","Tests the intersection between a <code>Ray3D</code> and a pack (i.e., …","","","","","","","","Gets the BBox of a Triangle"],"i":[0,0,1,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,3,0,3,0,0,4,5,6,3,7,8,4,9,5,6,3,7,8,4,9,3,5,6,7,8,4,5,6,7,8,4,9,7,8,4,9,7,9,8,9,5,6,3,7,8,4,9,0,5,9,5,6,3,7,8,4,9,4,8,4,5,9,3,3,4,9,3,6,7,8,4,9,5,6,3,7,8,4,9,5,6,3,7,8,4,9,5,6,3,7,8,4,9,9,5,6,3,7,8,4,9,10,11,0,0,0,0,0,12,0,13,13,13,14,0,13,15,0,0,13,12,12,12,0,13,13,13,13,13,13,13,0,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,14,14,14,14,14,14,14,14,14,0,12,12,12,12,12,12,12,12,12,12,12,12,12,17,17,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,18,18,18,18,18,18,18,18,0,18,0,0,0,0,18,18,18,0,18,0,0,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,0,23,23,23,23,23,23,23,23,23,23,0,0,0,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,26,0,27,0,27,0,27,0,0,27,0,27,0,27,27,27,27,28,29,30,31,0,0,27,27,27,0,0,0,0,0,27,27,0,27,27,0,0,0,0,0,0,30,31,28,29,27,0,27,28,29,27,27,27,27,0,32,33,34,35,36,37,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,25,0,25,25,25,25,25,25,25,25,25,25,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,26,0,26,26,26,26,26,26,26,26,26,26,26,26,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,40,41,42,0,0,0,0,0,0,0,0,0,43,44,0,0,45,0,0,0,0,46,0,0,0,0,0,43,44,47,43,44,47,45,48,45,48,48,45,45,48,45,45,43,44,47,43,44,47,47,43,44,49,50,43,44,47,43,44,47,43,44,47,46,46,43,44,46,43,44,49,49,49,49,0,43,44,47,51,43,44,50,43,44,47,50,43,44,47,45,0,50,47,51,49,51,49,46,45,0,43,44,47,49,50,43,44,47,43,44,47,43,44,47,43,44,47,43,44,47,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,53,54,53,54,54,53,54,53,54,54,54,53,54,54,54,54,54,53,53,54,0,54,54,53,54,53,54,53,54,53,54,0,0,0,0,0,0,0,0,0,55,55,0,56,56,56,56,57,56,55,57,56,55,57,56,56,56,57,57,56,56,56,55,57,56,56,56,56,57,56,55,57,56,56,56,56,56,57,56,56,56,56,56,57,56,55,57,56,55,57,56,55,57,56,56,55,57,56,0,0,0,58,58,0,0,58,58,58,58,0,0,0,58,58,58,0,0,0,0,0,0,0,58,58,58,58,58,58,0],"f":[null,null,[[["rgbspectrum",3]],["rgbspectrum",3]],null,null,null,null,null,null,[[["rgbspectrum",3]],["rgbspectrum",3]],[[["float",6]]],null,null,null,null,null,null,[[["rgbspectrum",3]],["rgbspectrum",3]],null,null,null,null,null,null,null,[[["rgbspectrum",3]],["rgbspectrum",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bbox3d",3]],null,null,null,null,null,null,null,[[["",0]],["bucketinfo",3]],[[["",0]],["leaf",3]],[[["",0]],["flatnode",3]],[[["",0]],["boundingvolumetree",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["boundingvolumetree",3]],null,[[["node",4],["vec",3]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point3d",3],["float",6],["bboxaxis",4],["usize",0],["point3d",3]],["usize",0]],null,[[["",0],["ray",3],["vec",3]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],null,null,[[["usize",0],["triangle",6]]],[[["scene",3]]],[[["bboxaxis",4],["node",4],["node",4]]],[[["usize",0],["usize",0],["bbox3d",3]]],null,null,[[["scene",3],["usize",0],["usize",0],["usize",0],["vec",3],["vec",3],["vec",3],["vec",3]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["ray3d",3],["float",6],["vec",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0],["randgen",6]],["camerasample",3]],[[["",0],["camerasample",3]]],null,null,[[["",0],["ray3d",3]]],null,null,null,[[["",0]],["view",3]],null,null,null,null,[[["",0]]],[[["",0],["randgen",6]],["camerasample",3]],[[["",0],["camerasample",3]]],[[["",0],["ray3d",3]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["view",3]],null,[[["",0]],["float",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]]],[[]],[[["",0],["randgen",6]],["camerasample",3]],[[["",0],["camerasample",3]]],[[]],[[["view",3],["film",3]]],[[["",0],["ray3d",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["view",3]],null,[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[]],null,null,null,null,null,[[]],[[["",0]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rgbspectrum",3]],[[["",0],["",0]]],[[]],[[["float",6]]],[[]],[[["",0]]],[[["",0],["float",6]]],[[["",0],["rgbspectrum",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["float",6]]],null,[[]],[[["",0]],["bool",0]],[[["",0]],["float",6]],[[["",0]],["float",6]],[[]],[[["float",6]]],[[["",0]]],[[["",0],["float",6]]],[[["",0],["rgbspectrum",3]],["bool",0]],[[["",0]]],[[]],[[["",0],["float",6]]],[[["",0],["i32",0]]],[[["",0]],["float",6]],null,[[]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[]],null,[[["matrix",6]],["matrix",6]],[[["colourmatrix",6]],["matrix",6]],[[["colourmatrix",6]],["matrix",6]],[[["path",3]],["result",4,[["colourmatrix",6],["string",3]]]],[[["path",3]],["result",4,[["matrix",6],["string",3]]]],[[["colourmatrix",6],["path",3]],["result",4,[["string",3]]]],[[["matrix",6],["path",3]],["result",4,[["string",3]]]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],null,[[]],null,[[["float",6],["float",6],["float",6]],["spectrum",6]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["scene",3]],["colourmatrix",6]],null,[[]],[[]],[[]],null,null,null,null,[[["",0],["scene",3],["ray",3],["usize",0],["colourmatrix",6],["randgen",6],["raytracerhelper",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],null,[[["vec",3],["vec",3],["vec",3],["vec",3,[["polygon",4]]]],["objresult",6]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bool",0]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0]],["bool",0]],[[["",0],["scene",3]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0],["scene",3],["str",0],["str",0]]],[[["",0]],["string",3]],[[["",0]],["bool",0]],null,[[],["radiancereader",3]],[[["",0],["string",3]]],[[]],[[["",0],["str",0]],["usize",0]],[[]],null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["simplemodel",3],["wavelengths",4]],["scene",3]],[[],["simplemodelreader",3]],[[]],[[["",0],["str",0]],["option",4,[["usize",0]]]],[[]],null,[[["",0],["scene",3],["substance",4],["wavelengths",4]],["usize",0]],[[["substance",4],["wavelengths",4]],["material",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["float",6],["float",6],["float",6]]],[[["",0],["",0]],["result",4,[["string",3]]]],[[]],[[["path",3]],["result",4,[["string",3]]]],[[["usize",0],["usize",0],["vec",3,[["spectrum",6]]]]],null,[[["",0]]],[[["",0]]],[[]],[[["usize",0],["usize",0]]],null,[[["u8",0],["u8",0],["u8",0],["u8",0]],["spectrum",6]],[[["float",6]]],[[["float",6],["i32",0]],["float",6]],[[["",0],["option",4,[["float",6]]],["option",4,[["float",6]]],["colourmap",4],["path",3]]],[[["",0],["path",3]]],[[["",0],["option",4,[["float",6]]],["option",4,[["float",6]]],["colourmap",4],["path",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["interaction",3]],[[["",0],["",0]]],[[],["interaction",3]],[[]],null,[[["",0]]],[[]],null,[[["",0]]],[[["",0],["transform",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spectrum",6]],null,null,null,null,[[["ray",3],["vector3d",3],["float",6]]],null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["ray",3],["vector3d",3]],["spectrum",6]],[[["vector3d",3],["vector3d",3],["vector3d",3]],["float",6]],[[["float",6],["float",6],["float",6],["float",6]],["float",6]],[[["float",6],["float",6],["float",6],["float",6]],["float",6]],[[["float",6],["float",6],["float",6],["float",6]],["float",6]],[[["vector3d",3],["vector3d",3],["float",6],["float",6],["float",6],["float",6]],["vector3d",3]],[[]],[[["",0],["vector3d",3],["point3d",3],["ray",3]]],null,[[["",0]],["str",0]],[[]],null,null,null,[[["point3d",3],["ray",3],["vector3d",3]],["float",6]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],null,null,null,null,null,[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["point3d",3],["ray",3],["randgen",6]]],null,[[["",0]],["bool",0]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spectrum",6]],null,[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["ray",3],["vector3d",3]],["spectrum",6]],[[]],[[["",0],["vector3d",3],["point3d",3],["ray",3]]],[[["",0]],["str",0]],[[]],[[["",0],["float",6],["float",6],["float",6],["option",4,[["float",6]]]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["spectrum",6]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spectrum",6]],null,[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["ray",3],["vector3d",3]],["spectrum",6]],[[]],[[["",0],["vector3d",3],["point3d",3],["ray",3]]],[[["",0]],["str",0]],[[]],[[["",0],["vector3d",3],["vector3d",3],["float",6]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spectrum",6]],[[]],[[["",0]],["str",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spectrum",6]],null,[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["ray",3],["vector3d",3]],["spectrum",6]],[[]],[[["",0]],["str",0]],[[]],null,[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["point3d",3],["ray",3],["randgen",6]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spectrum",6]],[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["ray",3],["vector3d",3]],["spectrum",6]],[[]],[[["",0],["vector3d",3],["point3d",3],["ray",3]]],[[["",0]],["str",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spectrum",6]],null,[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["ray",3],["vector3d",3]],["spectrum",6]],[[]],[[["",0]],["str",0]],[[]],null,[[["",0],["vector3d",3],["vector3d",3],["vector3d",3],["point3d",3],["ray",3],["randgen",6]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["ray",3],["vector3d",3],["float",6]]],[[["vector3d",3],["vector3d",3],["vector3d",3]],["float",6]],[[["float",6],["float",6],["float",6],["float",6]],["float",6]],[[["float",6],["float",6],["float",6],["float",6]],["float",6]],[[["float",6],["float",6],["float",6],["float",6]],["float",6]],[[["vector3d",3],["vector3d",3],["float",6],["float",6],["float",6],["float",6]],["vector3d",3]],[[["point3d",3],["ray",3],["vector3d",3]],["float",6]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],null,[[["vector3d",3],["vector3d",3],["vector3d",3],["float",6],["float",6],["float",6],["ray",3],["vector3d",3]]],[[["vector3d",3],["vector3d",3],["vector3d",3],["point3d",3],["float",6],["float",6],["float",6],["ray",3],["randgen",6]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["primitive",4]],[[["",0],["",0]]],[[["",0],["point3d",3]]],[[]],[[["",0]],["str",0]],[[["",0],["ray3d",3]],["option",4,[["intersectioninfo",3]]]],[[]],[[["",0],["randgen",6],["point3d",3]],["vector3d",3]],[[["",0],["ray3d",3]],["option",4,[["point3d",3]]]],[[["",0],["intersectioninfo",3],["ray3d",3]],["float",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]],["bbox3d",3]],null,null,null,null,[[["sphere3d",3],["randgen",6]],["point3d",3]],[[["triangle3d",3],["randgen",6]],["point3d",3]],[[["distantsource3d",3],["point3d",3]]],[[["distantsource3d",3],["intersectioninfo",3],["ray3d",3]],["float",6]],[[["sphere3d",3],["point3d",3]]],[[["sphere3d",3],["intersectioninfo",3],["ray3d",3]],["float",6]],[[["triangle3d",3],["point3d",3]]],[[["triangle3d",3],["intersectioninfo",3],["ray3d",3]],["float",6]],[[["float",6]],["float",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["",0],["usize",0]],["slicechooseiter",3]],[[["",0],["usize",0]],["vec",3,[["global",3]]]],[[["",0]],["usize",0]],[[["",0],["",0],["usize",0]],["result",4,[["slicechooseiter",3],["weightederror",4]]]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["",0]],["result",4,[["weightederror",4]]]],[[["",0],["",0]],["result",4,[["weightederror",4]]]],[[["",0]],["smallrng",3]],[[["",0]],["stdrng",3]],[[["",0]],["threadrng",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["threadrng",3]],[[["",0],["smallrng",3]],["bool",0]],[[["",0],["stdrng",3]],["bool",0]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[],["result",4,[["error",3]]]],[[],["result",4,[["smallrng",3],["error",3]]]],[[],["result",4,[["stdrng",3],["error",3]]]],[[]],[[],["smallrng",3]],[[],["stdrng",3]],[[["",0]]],[[["",0],["f64",0]],["bool",0]],[[["",0]]],[[["",0],["u32",0],["u32",0]],["bool",0]],[[],["randgen",6]],[[]],[[]],[[]],[[],["distmap",3]],[[["",0],["smallrng",3]],["bool",0]],[[["",0],["stdrng",3]],["bool",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0],["",0],["usize",0]]],[[]],[[["",0]],["result",4,[["usize",0],["error",3]]]],null,[[["",0],["",0]]],[[["",0]]],[[],["distiter",3]],[[],["distiter",3]],[[["u64",0]]],[[["",0],["",0]]],[[],["threadrng",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ray",3]],[[["",0],["",0]]],null,[[]],null,[[["",0]],["vector3d",3]],[[]],null,[[["",0],["usize",0],["usize",0],["float",6],["randgen",6]],["usize",0]],[[["",0]]],null,[[]],[[["",0]],["point3d",3]],null,[[["",0]]],[[["",0],["transform",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],[[]],[[]],[[["",0],["scene",3],["usize",0],["usize",0],["material",4],["ray",3],["randgen",6],["raytracerhelper",3]],["spectrum",6]],[[["",0],["scene",3],["material",4],["ray",3],["randgen",6],["usize",0],["usize",0],["vec",3]],["spectrum",6]],[[]],[[]],null,null,null,null,null,null,[[["scene",3],["camera",8]],["imagebuffer",3]],[[["scene",3],["object",3],["ray3d",3],["vec",3]],["option",4]],[[["",0],["scene",3],["material",4],["ray",3],["randgen",6],["usize",0],["usize",0],["vec",3]],["spectrum",6]],[[["",0],["randgen",6],["scene",3],["ray",3],["raytracerhelper",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[["vector3d",3],["vector3d",3],["vector3d",3],["point3d",3],["float",6],["float",6],["float",6]]],[[["randgen",6]],["vector3d",3]],[[["randgen",6],["float",6],["point3d",3],["vector3d",3]],["point3d",3]],[[["randgen",6],["vector3d",3],["vector3d",3],["vector3d",3]],["vector3d",3]],[[["randgen",6],["float",6]]],[[["randgen",6]],["point3d",3]],[[["randgen",6],["point3d",3],["point3d",3],["point3d",3]],["point3d",3]],null,null,null,null,null,null,[[["",0],["string",3],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["date",3],["float",6],["float",6],["float",6],["float",6],["float",6]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["ray",3],["vec",3]],["option",4,[["usize",0]]]],[[["",0]],["object",3]],[[["",0],["",0]]],[[["",0]],["usize",0]],[[],["scene",3]],null,[[]],[[]],[[]],[[["string",3]]],[[]],[[["simplemodel",3],["wavelengths",4]]],null,null,[[]],[[]],[[]],null,null,[[]],null,null,[[["",0],["material",4]],["usize",0]],[[["",0],["usize",0],["usize",0],["primitive",4]]],[[["",0]]],null,null,[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["ray3d",3],["float",6],["vec",3]],["bool",0]],[[]],[[]],[[]],null,null,[[["ray3d",3],["float",6],["float",6],["float",6],["float",6],["float",6],["float",6],["float",6],["float",6],["float",6]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],null,null,[[]],[[]],[[["sphere3d",3]]],[[["triangle3d",3]]],[[["triangle",6],["point3d",3],["float",6],["float",6],["vector3d",3]],["intersectioninfo",3]],null,null,null,[[["triangle",6],["ray3d",3]],["option",4,[["point3d",3]]]],[[["ray3d",3]],["option",4]],[[["triangle",6]],["float",6]],[[["triangle",6],["ray3d",3]],["option",4,[["intersectioninfo",3]]]],[[["ray3d",3]],["option",4]],[[["ray3d",3]],["option",4]],[[["triangle",6],["point3d",3],["vector3d",3],["ray3d",3]],["float",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[]],[[["triangle",6]],["bbox3d",3]]],"p":[[6,"Float"],[6,"Spectrum"],[4,"Node"],[3,"FlatNode"],[3,"ObjectInfo"],[3,"Interior"],[3,"BucketInfo"],[3,"Leaf"],[3,"BoundingVolumeTree"],[13,"Interior"],[13,"Leaf"],[3,"View"],[8,"Camera"],[3,"CameraSample"],[3,"Film"],[3,"Pinhole"],[3,"RGBSpectrum"],[4,"Colourmap"],[3,"DCFactory"],[3,"ObjTriangle"],[3,"RadianceReader"],[3,"SimpleModelReader"],[3,"ImageBuffer"],[3,"Interaction"],[3,"Light"],[3,"Mirror"],[4,"Material"],[3,"Plastic"],[3,"Metal"],[3,"Dielectric"],[3,"Glass"],[13,"Plastic"],[13,"Metal"],[13,"Light"],[13,"Mirror"],[13,"Dielectric"],[13,"Glass"],[4,"Primitive"],[13,"Sphere"],[13,"Triangle"],[13,"Cylinder"],[13,"Source"],[3,"SmallRng"],[3,"StdRng"],[8,"SliceRandom"],[8,"SeedableRng"],[3,"ThreadRng"],[8,"IteratorRandom"],[8,"Rng"],[8,"RngCore"],[8,"Distribution"],[3,"Ray"],[3,"RayTracerHelper"],[3,"RayTracer"],[4,"Wavelengths"],[3,"Scene"],[3,"Object"],[3,"Intersection"]]},\
"scompare":{"doc":"","t":[4,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArgColourMap","Inferno","Inputs","Magma","Plasma","Radiance","Viridis","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","from_arg_matches","input1","input2","into","into","into_app","into_app_for_update","log","main","map","max","min","output","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","value_variants","vzip","vzip"],"q":["scompare","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","One of the images to be compared","The other image to compare","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Use a log10 scale","","The colour scale to use","The maximum value in the scale","The minimum value in the scale","The output file (it is an HDRE if no colourmap (i.e., -m …","","","","","","","","","","","",""],"i":[0,1,0,1,1,1,1,2,2,1,2,1,2,1,1,1,2,2,2,2,1,2,2,2,2,0,2,2,2,2,1,1,1,2,1,2,1,2,2,1,1,2],"f":[null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["argcolourmap",4]],[[["",0],["",0]]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,null,[[]],[[]],[[],["command",6]],[[],["command",6]],null,[[]],null,null,null,null,[[["",0]]],[[["",0]],["option",4,[["possiblevalue",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[]]],"p":[[4,"ArgColourMap"],[3,"Inputs"]]},\
"sfalsecolor":{"doc":"","t":[4,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArgColourMap","Inferno","Inputs","Magma","Plasma","Radiance","Viridis","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","from_arg_matches","input","into","into","into_app","into_app_for_update","log","main","map","max","min","output","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","value_variants","vzip","vzip"],"q":["sfalsecolor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","The image to falsecolorize","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Use a log10 scale","","The colour scale to use","The maximum value in the scale","The minimum value in the scale","The output file (it is a JPEG)","","","","","","","","","","","",""],"i":[0,1,0,1,1,1,1,2,2,1,2,1,2,1,1,1,2,2,2,1,2,2,2,2,0,2,2,2,2,1,1,1,2,1,2,1,2,2,1,1,2],"f":[null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["argcolourmap",4]],[[["",0],["",0]]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[],["command",6]],[[],["command",6]],null,[[]],null,null,null,null,[[["",0]]],[[["",0]],["option",4,[["possiblevalue",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[]]],"p":[[4,"ArgColourMap"],[3,"Inputs"]]},\
"sfluxmtx":{"doc":"","t":[3,11,11,11,11,12,11,11,12,11,11,11,12,5,12,12,12,12,12,11,11,11,11,11],"n":["Inputs","augment_args","augment_args_for_update","borrow","borrow_mut","count_specular_bounce","from","from_arg_matches","input","into","into_app","into_app_for_update","limit_weight","main","max_depth","mf","n_ambient_samples","n_sensors","output","try_from","try_into","type_id","update_from_arg_matches","vzip"],"q":["sfluxmtx","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Calculates the Daylight Coefficients","","","","","The probability of counting purely specular bounces as an …","Returns the argument unchanged.","","The file to load the model from","Calls <code>U::from(self)</code>.","","","A lower value makes the Russian roulette less deadly","","The number of bounces before a ray is terminated (-ab in …","","The number of secondary rays sent from the first …","The number of sensors to receive in the standard input","The file where the matrix will be stored","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[],["command",6]],[[],["command",6]],null,[[]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]]],"p":[[3,"Inputs"]]},\
"spict":{"doc":"","t":[12,12,12,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,12,5,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12],"n":["0","1","2","Inputs","Triplet","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","count_specular_bounce","field_of_view","fmt","fmt","from","from","from_arg_matches","from_str","input","into","into","into_app","into_app_for_update","limit_weight","main","max_depth","n_ambient_samples","n_shadow_samples","output","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","view_direction","view_point","view_up","vzip","vzip","x","y"],"q":["spict","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","A program for Rendering an image from a .rad (i.e., …","","","","","","","","The probability of counting purely specular bounces as an …","The horizontal field of view, in degrees","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The file to load the model from","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","A lower value makes the Russian roulette less deadly","","The number of bounces before a ray is terminated (-ab in …","The number of secondary rays sent from the first …","The number of shadow rays per light source sent from the …","The output of the final image (in rgbe format)","","","","","","","","","The view direction (Does not need to be normalized. e.g., …","The view point (e.g., ‘-p 0. 1. 2’)","The view up (e.g., ‘-u 0. 1. 0’)","","","The Horizontal resolution of the final image","The Vertical resolution of the final image"],"i":[1,1,1,0,0,2,2,1,2,1,2,2,2,1,1,1,2,2,1,2,1,2,2,2,2,0,2,2,2,2,1,1,2,1,2,1,2,2,2,2,2,1,2,2,2],"f":[null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["str",0]],["result",4]],null,[[]],[[]],[[],["command",6]],[[],["command",6]],null,[[]],null,null,null,null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,null,[[]],[[]],null,null],"p":[[3,"Triplet"],[3,"Inputs"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};