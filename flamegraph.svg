<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180" total_samples="111191"><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.03%)</title><rect x="0.0009%" y="133" width="0.0261%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="29"/><text x="0.2509%" y="143.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (163 samples, 0.15%)</title><rect x="0.1007%" y="117" width="0.1466%" height="15" fill="rgb(217,0,24)" fg:x="112" fg:w="163"/><text x="0.3507%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (152 samples, 0.14%)</title><rect x="0.2473%" y="117" width="0.1367%" height="15" fill="rgb(221,193,54)" fg:x="275" fg:w="152"/><text x="0.4973%" y="127.50"></text></g><g><title>spict`&lt;rendering::material::metal::Metal as rendering::material::Material&gt;::colour (24 samples, 0.02%)</title><rect x="0.3840%" y="117" width="0.0216%" height="15" fill="rgb(248,212,6)" fg:x="427" fg:w="24"/><text x="0.6340%" y="127.50"></text></g><g><title>spict`&lt;rendering::material::plastic::Plastic as rendering::material::Material&gt;::sample_bsdf (132 samples, 0.12%)</title><rect x="0.4056%" y="117" width="0.1187%" height="15" fill="rgb(208,68,35)" fg:x="451" fg:w="132"/><text x="0.6556%" y="127.50"></text></g><g><title>spict`DYLD-STUB$$memmove (12 samples, 0.01%)</title><rect x="0.5270%" y="117" width="0.0108%" height="15" fill="rgb(232,128,0)" fg:x="586" fg:w="12"/><text x="0.7770%" y="127.50"></text></g><g><title>spict`rendering::bvh::BoundingVolumeTree::intersect (33 samples, 0.03%)</title><rect x="0.5405%" y="117" width="0.0297%" height="15" fill="rgb(207,160,47)" fg:x="601" fg:w="33"/><text x="0.7905%" y="127.50"></text></g><g><title>spict`rendering::ray_tracer::RayTracer::sample_light_array (317 samples, 0.29%)</title><rect x="0.5738%" y="117" width="0.2851%" height="15" fill="rgb(228,23,34)" fg:x="638" fg:w="317"/><text x="0.8238%" y="127.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (1,390 samples, 1.25%)</title><rect x="1.3949%" y="101" width="1.2501%" height="15" fill="rgb(218,30,26)" fg:x="1551" fg:w="1390"/><text x="1.6449%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (252 samples, 0.23%)</title><rect x="2.6486%" y="101" width="0.2266%" height="15" fill="rgb(220,122,19)" fg:x="2945" fg:w="252"/><text x="2.8986%" y="111.50"></text></g><g><title>spict`&lt;rendering::material::metal::Metal as rendering::material::Material&gt;::colour (47 samples, 0.04%)</title><rect x="2.8752%" y="101" width="0.0423%" height="15" fill="rgb(250,228,42)" fg:x="3197" fg:w="47"/><text x="3.1252%" y="111.50"></text></g><g><title>spict`&lt;rendering::material::plastic::Plastic as rendering::material::Material&gt;::sample_bsdf (556 samples, 0.50%)</title><rect x="2.9175%" y="101" width="0.5000%" height="15" fill="rgb(240,193,28)" fg:x="3244" fg:w="556"/><text x="3.1675%" y="111.50"></text></g><g><title>spict`DYLD-STUB$$__sincosf_stret (33 samples, 0.03%)</title><rect x="3.4175%" y="101" width="0.0297%" height="15" fill="rgb(216,20,37)" fg:x="3800" fg:w="33"/><text x="3.6675%" y="111.50"></text></g><g><title>spict`DYLD-STUB$$memmove (42 samples, 0.04%)</title><rect x="3.4472%" y="101" width="0.0378%" height="15" fill="rgb(206,188,39)" fg:x="3833" fg:w="42"/><text x="3.6972%" y="111.50"></text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (287 samples, 0.26%)</title><rect x="3.4895%" y="101" width="0.2581%" height="15" fill="rgb(217,207,13)" fg:x="3880" fg:w="287"/><text x="3.7395%" y="111.50"></text></g><g><title>spict`geometry3d::triangle3d::Triangle3D::basic_intersection (248 samples, 0.22%)</title><rect x="3.7476%" y="101" width="0.2230%" height="15" fill="rgb(231,73,38)" fg:x="4167" fg:w="248"/><text x="3.9976%" y="111.50"></text></g><g><title>spict`rendering::bvh::BoundingVolumeTree::intersect (1,424 samples, 1.28%)</title><rect x="3.9706%" y="101" width="1.2807%" height="15" fill="rgb(225,20,46)" fg:x="4415" fg:w="1424"/><text x="4.2206%" y="111.50"></text></g><g><title>spict`rendering::material::Material::emits_light (45 samples, 0.04%)</title><rect x="5.2513%" y="101" width="0.0405%" height="15" fill="rgb(210,31,41)" fg:x="5839" fg:w="45"/><text x="5.5013%" y="111.50"></text></g><g><title>libsystem_m.dylib`tan (16 samples, 0.01%)</title><rect x="7.8936%" y="85" width="0.0144%" height="15" fill="rgb(221,200,47)" fg:x="8777" fg:w="16"/><text x="8.1436%" y="95.50"></text></g><g><title>spict`geometry3d::distant_source3d::DistantSource3D::simple_intersect (35 samples, 0.03%)</title><rect x="7.9080%" y="85" width="0.0315%" height="15" fill="rgb(226,26,5)" fg:x="8793" fg:w="35"/><text x="8.1580%" y="95.50"></text></g><g><title>spict`rendering::ray_tracer::RayTracer::sample_light_array (3,054 samples, 2.75%)</title><rect x="5.2918%" y="101" width="2.7466%" height="15" fill="rgb(249,33,26)" fg:x="5884" fg:w="3054"/><text x="5.5418%" y="111.50">sp..</text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (110 samples, 0.10%)</title><rect x="7.9395%" y="85" width="0.0989%" height="15" fill="rgb(235,183,28)" fg:x="8828" fg:w="110"/><text x="8.1895%" y="95.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (2,831 samples, 2.55%)</title><rect x="9.6959%" y="85" width="2.5461%" height="15" fill="rgb(221,5,38)" fg:x="10781" fg:w="2831"/><text x="9.9459%" y="95.50">li..</text></g><g><title>libsystem_m.dylib`tan (19 samples, 0.02%)</title><rect x="12.2420%" y="85" width="0.0171%" height="15" fill="rgb(247,18,42)" fg:x="13612" fg:w="19"/><text x="12.4920%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (197 samples, 0.18%)</title><rect x="12.2591%" y="85" width="0.1772%" height="15" fill="rgb(241,131,45)" fg:x="13631" fg:w="197"/><text x="12.5091%" y="95.50"></text></g><g><title>spict`&lt;rendering::material::metal::Metal as rendering::material::Material&gt;::colour (81 samples, 0.07%)</title><rect x="12.4372%" y="85" width="0.0728%" height="15" fill="rgb(249,31,29)" fg:x="13829" fg:w="81"/><text x="12.6872%" y="95.50"></text></g><g><title>spict`&lt;rendering::material::plastic::Plastic as rendering::material::Material&gt;::sample_bsdf (710 samples, 0.64%)</title><rect x="12.5100%" y="85" width="0.6385%" height="15" fill="rgb(225,111,53)" fg:x="13910" fg:w="710"/><text x="12.7600%" y="95.50"></text></g><g><title>spict`DYLD-STUB$$__sincosf_stret (48 samples, 0.04%)</title><rect x="13.1485%" y="85" width="0.0432%" height="15" fill="rgb(238,160,17)" fg:x="14620" fg:w="48"/><text x="13.3985%" y="95.50"></text></g><g><title>spict`DYLD-STUB$$memmove (29 samples, 0.03%)</title><rect x="13.1917%" y="85" width="0.0261%" height="15" fill="rgb(214,148,48)" fg:x="14668" fg:w="29"/><text x="13.4417%" y="95.50"></text></g><g><title>spict`DYLD-STUB$$tan (18 samples, 0.02%)</title><rect x="13.2178%" y="85" width="0.0162%" height="15" fill="rgb(232,36,49)" fg:x="14697" fg:w="18"/><text x="13.4678%" y="95.50"></text></g><g><title>spict`geometry3d::distant_source3d::DistantSource3D::simple_intersect (28 samples, 0.03%)</title><rect x="13.2340%" y="85" width="0.0252%" height="15" fill="rgb(209,103,24)" fg:x="14715" fg:w="28"/><text x="13.4840%" y="95.50"></text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (1,659 samples, 1.49%)</title><rect x="13.2592%" y="85" width="1.4920%" height="15" fill="rgb(229,88,8)" fg:x="14743" fg:w="1659"/><text x="13.5092%" y="95.50"></text></g><g><title>spict`geometry3d::triangle3d::Triangle3D::basic_intersection (1,593 samples, 1.43%)</title><rect x="14.7512%" y="85" width="1.4327%" height="15" fill="rgb(213,181,19)" fg:x="16402" fg:w="1593"/><text x="15.0012%" y="95.50"></text></g><g><title>spict`rendering::bvh::BoundingVolumeTree::intersect (7,385 samples, 6.64%)</title><rect x="16.1839%" y="85" width="6.6417%" height="15" fill="rgb(254,191,54)" fg:x="17995" fg:w="7385"/><text x="16.4339%" y="95.50">spict`ren..</text></g><g><title>spict`rendering::material::Material::emits_light (79 samples, 0.07%)</title><rect x="22.8256%" y="85" width="0.0710%" height="15" fill="rgb(241,83,37)" fg:x="25380" fg:w="79"/><text x="23.0756%" y="95.50"></text></g><g><title>libsystem_m.dylib`tan (83 samples, 0.07%)</title><rect x="31.7831%" y="69" width="0.0746%" height="15" fill="rgb(233,36,39)" fg:x="35340" fg:w="83"/><text x="32.0331%" y="79.50"></text></g><g><title>spict`geometry3d::distant_source3d::DistantSource3D::simple_intersect (205 samples, 0.18%)</title><rect x="31.8578%" y="69" width="0.1844%" height="15" fill="rgb(226,3,54)" fg:x="35423" fg:w="205"/><text x="32.1078%" y="79.50"></text></g><g><title>spict`rendering::ray_tracer::RayTracer::sample_light_array (10,751 samples, 9.67%)</title><rect x="22.8966%" y="85" width="9.6689%" height="15" fill="rgb(245,192,40)" fg:x="25459" fg:w="10751"/><text x="23.1466%" y="95.50">spict`renderin..</text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (582 samples, 0.52%)</title><rect x="32.0422%" y="69" width="0.5234%" height="15" fill="rgb(238,167,29)" fg:x="35628" fg:w="582"/><text x="32.2922%" y="79.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (3,536 samples, 3.18%)</title><rect x="35.3131%" y="69" width="3.1801%" height="15" fill="rgb(232,182,51)" fg:x="39265" fg:w="3536"/><text x="35.5631%" y="79.50">lib..</text></g><g><title>libsystem_m.dylib`tan (33 samples, 0.03%)</title><rect x="38.4932%" y="69" width="0.0297%" height="15" fill="rgb(231,60,39)" fg:x="42801" fg:w="33"/><text x="38.7432%" y="79.50"></text></g><g><title>spict`&lt;rendering::material::metal::Metal as rendering::material::Material&gt;::colour (93 samples, 0.08%)</title><rect x="38.5247%" y="69" width="0.0836%" height="15" fill="rgb(208,69,12)" fg:x="42836" fg:w="93"/><text x="38.7747%" y="79.50"></text></g><g><title>spict`&lt;rendering::material::plastic::Plastic as rendering::material::Material&gt;::sample_bsdf (536 samples, 0.48%)</title><rect x="38.6083%" y="69" width="0.4821%" height="15" fill="rgb(235,93,37)" fg:x="42929" fg:w="536"/><text x="38.8583%" y="79.50"></text></g><g><title>spict`DYLD-STUB$$__sincosf_stret (72 samples, 0.06%)</title><rect x="39.0904%" y="69" width="0.0648%" height="15" fill="rgb(213,116,39)" fg:x="43465" fg:w="72"/><text x="39.3404%" y="79.50"></text></g><g><title>spict`DYLD-STUB$$tan (43 samples, 0.04%)</title><rect x="39.1551%" y="69" width="0.0387%" height="15" fill="rgb(222,207,29)" fg:x="43537" fg:w="43"/><text x="39.4051%" y="79.50"></text></g><g><title>spict`geometry3d::distant_source3d::DistantSource3D::simple_intersect (62 samples, 0.06%)</title><rect x="39.1938%" y="69" width="0.0558%" height="15" fill="rgb(206,96,30)" fg:x="43580" fg:w="62"/><text x="39.4438%" y="79.50"></text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (3,111 samples, 2.80%)</title><rect x="39.2496%" y="69" width="2.7979%" height="15" fill="rgb(218,138,4)" fg:x="43642" fg:w="3111"/><text x="39.4996%" y="79.50">sp..</text></g><g><title>spict`geometry3d::triangle3d::Triangle3D::basic_intersection (3,042 samples, 2.74%)</title><rect x="42.0475%" y="69" width="2.7358%" height="15" fill="rgb(250,191,14)" fg:x="46753" fg:w="3042"/><text x="42.2975%" y="79.50">sp..</text></g><g><title>spict`rendering::bvh::BoundingVolumeTree::intersect (13,151 samples, 11.83%)</title><rect x="44.7833%" y="69" width="11.8274%" height="15" fill="rgb(239,60,40)" fg:x="49795" fg:w="13151"/><text x="45.0333%" y="79.50">spict`rendering::b..</text></g><g><title>spict`rendering::material::Material::emits_light (75 samples, 0.07%)</title><rect x="56.6107%" y="69" width="0.0675%" height="15" fill="rgb(206,27,48)" fg:x="62946" fg:w="75"/><text x="56.8607%" y="79.50"></text></g><g><title>libsystem_m.dylib`tan (163 samples, 0.15%)</title><rect x="70.4787%" y="53" width="0.1466%" height="15" fill="rgb(225,35,8)" fg:x="78366" fg:w="163"/><text x="70.7287%" y="63.50"></text></g><g><title>spict`geometry3d::distant_source3d::DistantSource3D::simple_intersect (381 samples, 0.34%)</title><rect x="70.6271%" y="53" width="0.3427%" height="15" fill="rgb(250,213,24)" fg:x="78531" fg:w="381"/><text x="70.8771%" y="63.50"></text></g><g><title>spict`rendering::ray_tracer::RayTracer::sample_light_array (17,003 samples, 15.29%)</title><rect x="56.6781%" y="69" width="15.2917%" height="15" fill="rgb(247,123,22)" fg:x="63021" fg:w="17003"/><text x="56.9281%" y="79.50">spict`rendering::ray_tr..</text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (1,112 samples, 1.00%)</title><rect x="70.9698%" y="53" width="1.0001%" height="15" fill="rgb(231,138,38)" fg:x="78912" fg:w="1112"/><text x="71.2198%" y="63.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (1,428 samples, 1.28%)</title><rect x="73.1300%" y="53" width="1.2843%" height="15" fill="rgb(231,145,46)" fg:x="81314" fg:w="1428"/><text x="73.3800%" y="63.50"></text></g><g><title>libsystem_m.dylib`tan (30 samples, 0.03%)</title><rect x="74.4143%" y="53" width="0.0270%" height="15" fill="rgb(251,118,11)" fg:x="82742" fg:w="30"/><text x="74.6643%" y="63.50"></text></g><g><title>spict`&lt;rendering::material::metal::Metal as rendering::material::Material&gt;::colour (85 samples, 0.08%)</title><rect x="74.4413%" y="53" width="0.0764%" height="15" fill="rgb(217,147,25)" fg:x="82772" fg:w="85"/><text x="74.6913%" y="63.50"></text></g><g><title>spict`DYLD-STUB$$__sincosf_stret (30 samples, 0.03%)</title><rect x="74.5177%" y="53" width="0.0270%" height="15" fill="rgb(247,81,37)" fg:x="82857" fg:w="30"/><text x="74.7677%" y="63.50"></text></g><g><title>spict`DYLD-STUB$$tan (33 samples, 0.03%)</title><rect x="74.5447%" y="53" width="0.0297%" height="15" fill="rgb(209,12,38)" fg:x="82887" fg:w="33"/><text x="74.7947%" y="63.50"></text></g><g><title>spict`geometry3d::distant_source3d::DistantSource3D::simple_intersect (48 samples, 0.04%)</title><rect x="74.5744%" y="53" width="0.0432%" height="15" fill="rgb(227,1,9)" fg:x="82920" fg:w="48"/><text x="74.8244%" y="63.50"></text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (2,564 samples, 2.31%)</title><rect x="74.6175%" y="53" width="2.3059%" height="15" fill="rgb(248,47,43)" fg:x="82968" fg:w="2564"/><text x="74.8675%" y="63.50">s..</text></g><g><title>spict`geometry3d::triangle3d::Triangle3D::basic_intersection (2,711 samples, 2.44%)</title><rect x="76.9235%" y="53" width="2.4381%" height="15" fill="rgb(221,10,30)" fg:x="85532" fg:w="2711"/><text x="77.1735%" y="63.50">sp..</text></g><g><title>spict`rendering::bvh::BoundingVolumeTree::intersect (10,785 samples, 9.70%)</title><rect x="79.3616%" y="53" width="9.6995%" height="15" fill="rgb(210,229,1)" fg:x="88243" fg:w="10785"/><text x="79.6116%" y="63.50">spict`renderin..</text></g><g><title>libsystem_m.dylib`tan (156 samples, 0.14%)</title><rect x="98.6905%" y="37" width="0.1403%" height="15" fill="rgb(222,148,37)" fg:x="109735" fg:w="156"/><text x="98.9405%" y="47.50"></text></g><g><title>spict`geometry3d::distant_source3d::DistantSource3D::simple_intersect (336 samples, 0.30%)</title><rect x="98.8344%" y="37" width="0.3022%" height="15" fill="rgb(234,67,33)" fg:x="109895" fg:w="336"/><text x="99.0844%" y="47.50"></text></g><g><title>spict`rendering::ray_tracer::RayTracer::trace_ray (111,144 samples, 99.96%)</title><rect x="0.0414%" y="133" width="99.9577%" height="15" fill="rgb(247,98,35)" fg:x="46" fg:w="111144"/><text x="0.2914%" y="143.50">spict`rendering::ray_tracer::RayTracer::trace_ray</text></g><g><title>spict`rendering::ray_tracer::RayTracer::trace_ray (110,235 samples, 99.14%)</title><rect x="0.8589%" y="117" width="99.1402%" height="15" fill="rgb(247,138,52)" fg:x="955" fg:w="110235"/><text x="1.1089%" y="127.50">spict`rendering::ray_tracer::RayTracer::trace_ray</text></g><g><title>spict`rendering::ray_tracer::RayTracer::trace_ray (102,252 samples, 91.96%)</title><rect x="8.0384%" y="101" width="91.9607%" height="15" fill="rgb(213,79,30)" fg:x="8938" fg:w="102252"/><text x="8.2884%" y="111.50">spict`rendering::ray_tracer::RayTracer::trace_ray</text></g><g><title>spict`rendering::ray_tracer::RayTracer::trace_ray (74,980 samples, 67.43%)</title><rect x="32.5656%" y="85" width="67.4335%" height="15" fill="rgb(246,177,23)" fg:x="36210" fg:w="74980"/><text x="32.8156%" y="95.50">spict`rendering::ray_tracer::RayTracer::trace_ray</text></g><g><title>spict`rendering::ray_tracer::RayTracer::trace_ray (31,166 samples, 28.03%)</title><rect x="71.9699%" y="69" width="28.0292%" height="15" fill="rgb(230,62,27)" fg:x="80024" fg:w="31166"/><text x="72.2199%" y="79.50">spict`rendering::ray_tracer::RayTracer::trace..</text></g><g><title>spict`rendering::ray_tracer::RayTracer::sample_light_array (12,162 samples, 10.94%)</title><rect x="89.0612%" y="53" width="10.9379%" height="15" fill="rgb(216,154,8)" fg:x="99028" fg:w="12162"/><text x="89.3112%" y="63.50">spict`rendering:..</text></g><g><title>spict`geometry3d::transform::Transform::inv_transform_ray (959 samples, 0.86%)</title><rect x="99.1366%" y="37" width="0.8625%" height="15" fill="rgb(244,35,45)" fg:x="110231" fg:w="959"/><text x="99.3866%" y="47.50"></text></g><g><title>all (111,191 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="111191"/><text x="0.2500%" y="223.50"></text></g><g><title>dyld`start (111,191 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="111191"/><text x="0.2500%" y="207.50">dyld`start</text></g><g><title>spict`main (111,191 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="111191"/><text x="0.2500%" y="191.50">spict`main</text></g><g><title>spict`std::sys_common::backtrace::__rust_begin_short_backtrace (111,191 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="111191"/><text x="0.2500%" y="175.50">spict`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>spict`spict::main (111,190 samples, 100.00%)</title><rect x="0.0009%" y="149" width="99.9991%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="111190"/><text x="0.2509%" y="159.50">spict`spict::main</text></g></svg></svg>