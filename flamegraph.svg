<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="3488"><g><title>dyld`start (1 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0287%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`main (1 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0287%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.03%)</title><rect x="0.0000%" y="341" width="0.0287%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`test_scenes::main (1 samples, 0.03%)</title><rect x="0.0000%" y="325" width="0.0287%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="0.0000%" y="309" width="0.0287%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.03%)</title><rect x="0.0287%" y="245" width="0.0287%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2787%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="0.0573%" y="245" width="0.0287%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.3073%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.46%)</title><rect x="0.1720%" y="229" width="0.4587%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="16"/><text x="0.4220%" y="239.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`DYLD-STUB$$memmove (3 samples, 0.09%)</title><rect x="0.6307%" y="229" width="0.0860%" height="15" fill="rgb(218,30,26)" fg:x="22" fg:w="3"/><text x="0.8807%" y="239.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::BoundingVolumeTree::intersect (1 samples, 0.03%)</title><rect x="0.7167%" y="229" width="0.0287%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="1"/><text x="0.9667%" y="239.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::Material::sample_bsdf (11 samples, 0.32%)</title><rect x="0.7454%" y="229" width="0.3154%" height="15" fill="rgb(250,228,42)" fg:x="26" fg:w="11"/><text x="0.9954%" y="239.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (6 samples, 0.17%)</title><rect x="2.2936%" y="213" width="0.1720%" height="15" fill="rgb(240,193,28)" fg:x="80" fg:w="6"/><text x="2.5436%" y="223.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::BoundingVolumeTree::intersect (15 samples, 0.43%)</title><rect x="2.4656%" y="213" width="0.4300%" height="15" fill="rgb(216,20,37)" fg:x="86" fg:w="15"/><text x="2.7156%" y="223.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (161 samples, 4.62%)</title><rect x="3.9564%" y="197" width="4.6158%" height="15" fill="rgb(206,188,39)" fg:x="138" fg:w="161"/><text x="4.2064%" y="207.50">libsy..</text></g><g><title>test_scenes-bd877bf15bf1135c`DYLD-STUB$$__sincosf_stret (3 samples, 0.09%)</title><rect x="8.5722%" y="197" width="0.0860%" height="15" fill="rgb(217,207,13)" fg:x="299" fg:w="3"/><text x="8.8222%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::Material::sample_bsdf (251 samples, 7.20%)</title><rect x="2.8956%" y="213" width="7.1961%" height="15" fill="rgb(231,73,38)" fg:x="101" fg:w="251"/><text x="3.1456%" y="223.50">test_scene..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::ward::sample_ward_anisotropic (50 samples, 1.43%)</title><rect x="8.6583%" y="197" width="1.4335%" height="15" fill="rgb(225,20,46)" fg:x="302" fg:w="50"/><text x="8.9083%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::ward::evaluate_ward_anisotropic (1 samples, 0.03%)</title><rect x="10.0917%" y="213" width="0.0287%" height="15" fill="rgb(210,31,41)" fg:x="352" fg:w="1"/><text x="10.3417%" y="223.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::ward::sample_ward_anisotropic (25 samples, 0.72%)</title><rect x="10.1204%" y="213" width="0.7167%" height="15" fill="rgb(221,200,47)" fg:x="353" fg:w="25"/><text x="10.3704%" y="223.50"></text></g><g><title>libsystem_m.dylib`acos (7 samples, 0.20%)</title><rect x="11.0952%" y="197" width="0.2007%" height="15" fill="rgb(226,26,5)" fg:x="387" fg:w="7"/><text x="11.3452%" y="207.50"></text></g><g><title>libsystem_m.dylib`atan2 (18 samples, 0.52%)</title><rect x="11.2959%" y="197" width="0.5161%" height="15" fill="rgb(249,33,26)" fg:x="394" fg:w="18"/><text x="11.5459%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Mul&gt;::mul (28 samples, 0.80%)</title><rect x="11.8119%" y="197" width="0.8028%" height="15" fill="rgb(235,183,28)" fg:x="412" fg:w="28"/><text x="12.0619%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`DYLD-STUB$$sin (1 samples, 0.03%)</title><rect x="12.6147%" y="197" width="0.0287%" height="15" fill="rgb(221,5,38)" fg:x="440" fg:w="1"/><text x="12.8647%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::intersection::IntersectionInfo::new (3 samples, 0.09%)</title><rect x="12.6433%" y="197" width="0.0860%" height="15" fill="rgb(247,18,42)" fg:x="441" fg:w="3"/><text x="12.8933%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::intersection::IntersectionInfo::transform (13 samples, 0.37%)</title><rect x="12.7294%" y="197" width="0.3727%" height="15" fill="rgb(241,131,45)" fg:x="444" fg:w="13"/><text x="12.9794%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::transform::Transform::inv_transform_ray (4 samples, 0.11%)</title><rect x="13.1021%" y="197" width="0.1147%" height="15" fill="rgb(249,31,29)" fg:x="457" fg:w="4"/><text x="13.3521%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x000000018bd581e4 (2 samples, 0.06%)</title><rect x="28.1537%" y="181" width="0.0573%" height="15" fill="rgb(225,111,53)" fg:x="982" fg:w="2"/><text x="28.4037%" y="191.50"></text></g><g><title>libsystem_m.dylib`sin (2 samples, 0.06%)</title><rect x="28.2110%" y="181" width="0.0573%" height="15" fill="rgb(238,160,17)" fg:x="984" fg:w="2"/><text x="28.4610%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Div&gt;::div (9 samples, 0.26%)</title><rect x="28.2683%" y="181" width="0.2580%" height="15" fill="rgb(214,148,48)" fg:x="986" fg:w="9"/><text x="28.5183%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Mul&gt;::mul (1 samples, 0.03%)</title><rect x="28.5264%" y="181" width="0.0287%" height="15" fill="rgb(232,36,49)" fg:x="995" fg:w="1"/><text x="28.7764%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::sample_light (558 samples, 16.00%)</title><rect x="13.2167%" y="197" width="15.9977%" height="15" fill="rgb(209,103,24)" fg:x="461" fg:w="558"/><text x="13.4667%" y="207.50">test_scenes-bd877bf15bf11..</text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::round_error::ApproxFloat::solve_quadratic (23 samples, 0.66%)</title><rect x="28.5550%" y="181" width="0.6594%" height="15" fill="rgb(229,88,8)" fg:x="996" fg:w="23"/><text x="28.8050%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::sample_light_array (706 samples, 20.24%)</title><rect x="10.8372%" y="213" width="20.2408%" height="15" fill="rgb(213,181,19)" fg:x="378" fg:w="706"/><text x="11.0872%" y="223.50">test_scenes-bd877bf15bf1135c`ren..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::triangle::triangle_pack_baricentric_coorinates (65 samples, 1.86%)</title><rect x="29.2144%" y="197" width="1.8635%" height="15" fill="rgb(254,191,54)" fg:x="1019" fg:w="65"/><text x="29.4644%" y="207.50">t..</text></g><g><title>libsystem_m.dylib`__sincosf_stret (12 samples, 0.34%)</title><rect x="31.5367%" y="197" width="0.3440%" height="15" fill="rgb(241,83,37)" fg:x="1100" fg:w="12"/><text x="31.7867%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::BoundingVolumeTree::intersect (473 samples, 13.56%)</title><rect x="31.8807%" y="197" width="13.5608%" height="15" fill="rgb(233,36,39)" fg:x="1112" fg:w="473"/><text x="32.1307%" y="207.50">test_scenes-bd877bf1..</text></g><g><title>libsystem_m.dylib`__sincosf_stret (3 samples, 0.09%)</title><rect x="45.4989%" y="181" width="0.0860%" height="15" fill="rgb(226,3,54)" fg:x="1587" fg:w="3"/><text x="45.7489%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::Material::sample_bsdf (6 samples, 0.17%)</title><rect x="45.4415%" y="197" width="0.1720%" height="15" fill="rgb(245,192,40)" fg:x="1585" fg:w="6"/><text x="45.6915%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::ward::sample_ward_anisotropic (1 samples, 0.03%)</title><rect x="45.5849%" y="181" width="0.0287%" height="15" fill="rgb(238,167,29)" fg:x="1590" fg:w="1"/><text x="45.8349%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::ward::evaluate_ward_anisotropic (2 samples, 0.06%)</title><rect x="45.6135%" y="197" width="0.0573%" height="15" fill="rgb(232,182,51)" fg:x="1591" fg:w="2"/><text x="45.8635%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x000000018bd776ac (1 samples, 0.03%)</title><rect x="46.2729%" y="181" width="0.0287%" height="15" fill="rgb(231,60,39)" fg:x="1614" fg:w="1"/><text x="46.5229%" y="191.50"></text></g><g><title>libsystem_m.dylib`acos (8 samples, 0.23%)</title><rect x="46.3016%" y="181" width="0.2294%" height="15" fill="rgb(208,69,12)" fg:x="1615" fg:w="8"/><text x="46.5516%" y="191.50"></text></g><g><title>libsystem_m.dylib`atan2 (58 samples, 1.66%)</title><rect x="46.5310%" y="181" width="1.6628%" height="15" fill="rgb(235,93,37)" fg:x="1623" fg:w="58"/><text x="46.7810%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Mul&gt;::mul (67 samples, 1.92%)</title><rect x="48.1938%" y="181" width="1.9209%" height="15" fill="rgb(213,116,39)" fg:x="1681" fg:w="67"/><text x="48.4438%" y="191.50">t..</text></g><g><title>test_scenes-bd877bf15bf1135c`DYLD-STUB$$sin (1 samples, 0.03%)</title><rect x="50.1147%" y="181" width="0.0287%" height="15" fill="rgb(222,207,29)" fg:x="1748" fg:w="1"/><text x="50.3647%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::intersection::IntersectionInfo::new (5 samples, 0.14%)</title><rect x="50.1433%" y="181" width="0.1433%" height="15" fill="rgb(206,96,30)" fg:x="1749" fg:w="5"/><text x="50.3933%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::intersection::IntersectionInfo::transform (29 samples, 0.83%)</title><rect x="50.2867%" y="181" width="0.8314%" height="15" fill="rgb(218,138,4)" fg:x="1754" fg:w="29"/><text x="50.5367%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::transform::Transform::inv_transform_ray (6 samples, 0.17%)</title><rect x="51.1181%" y="181" width="0.1720%" height="15" fill="rgb(250,191,14)" fg:x="1783" fg:w="6"/><text x="51.3681%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::ward::evaluate_ward_anisotropic (2 samples, 0.06%)</title><rect x="51.2901%" y="181" width="0.0573%" height="15" fill="rgb(239,60,40)" fg:x="1789" fg:w="2"/><text x="51.5401%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x000000018bd581e4 (6 samples, 0.17%)</title><rect x="82.0241%" y="165" width="0.1720%" height="15" fill="rgb(206,27,48)" fg:x="2861" fg:w="6"/><text x="82.2741%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Div&gt;::div (44 samples, 1.26%)</title><rect x="82.1961%" y="165" width="1.2615%" height="15" fill="rgb(225,35,8)" fg:x="2867" fg:w="44"/><text x="82.4461%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Mul&gt;::mul (6 samples, 0.17%)</title><rect x="83.4576%" y="165" width="0.1720%" height="15" fill="rgb(250,213,24)" fg:x="2911" fg:w="6"/><text x="83.7076%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::sample_light (1,145 samples, 32.83%)</title><rect x="51.3475%" y="181" width="32.8268%" height="15" fill="rgb(247,123,22)" fg:x="1791" fg:w="1145"/><text x="51.5975%" y="191.50">test_scenes-bd877bf15bf1135c`rendering::ray_tracer::s..</text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::round_error::ApproxFloat::solve_quadratic (19 samples, 0.54%)</title><rect x="83.6296%" y="165" width="0.5447%" height="15" fill="rgb(231,138,38)" fg:x="2917" fg:w="19"/><text x="83.8796%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::sample_light_array (1,527 samples, 43.78%)</title><rect x="45.6709%" y="197" width="43.7787%" height="15" fill="rgb(231,145,46)" fg:x="1593" fg:w="1527"/><text x="45.9209%" y="207.50">test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::sample_li..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::triangle::triangle_pack_baricentric_coorinates (184 samples, 5.28%)</title><rect x="84.1743%" y="181" width="5.2752%" height="15" fill="rgb(251,118,11)" fg:x="2936" fg:w="184"/><text x="84.4243%" y="191.50">test_s..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::BoundingVolumeTree::intersect (13 samples, 0.37%)</title><rect x="89.4782%" y="181" width="0.3727%" height="15" fill="rgb(217,147,25)" fg:x="3121" fg:w="13"/><text x="89.7282%" y="191.50"></text></g><g><title>libsystem_m.dylib`atan2 (8 samples, 0.23%)</title><rect x="89.8796%" y="165" width="0.2294%" height="15" fill="rgb(247,81,37)" fg:x="3135" fg:w="8"/><text x="90.1296%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Mul&gt;::mul (7 samples, 0.20%)</title><rect x="90.1089%" y="165" width="0.2007%" height="15" fill="rgb(209,12,38)" fg:x="3143" fg:w="7"/><text x="90.3589%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::intersection::IntersectionInfo::new (1 samples, 0.03%)</title><rect x="90.3096%" y="165" width="0.0287%" height="15" fill="rgb(227,1,9)" fg:x="3150" fg:w="1"/><text x="90.5596%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::intersection::IntersectionInfo::transform (3 samples, 0.09%)</title><rect x="90.3383%" y="165" width="0.0860%" height="15" fill="rgb(248,47,43)" fg:x="3151" fg:w="3"/><text x="90.5883%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::transform::Transform::inv_transform_ray (1 samples, 0.03%)</title><rect x="90.4243%" y="165" width="0.0287%" height="15" fill="rgb(221,10,30)" fg:x="3154" fg:w="1"/><text x="90.6743%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::material::ward::evaluate_ward_anisotropic (2 samples, 0.06%)</title><rect x="90.4530%" y="165" width="0.0573%" height="15" fill="rgb(210,229,1)" fg:x="3155" fg:w="2"/><text x="90.7030%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Div&gt;::div (2 samples, 0.06%)</title><rect x="92.9472%" y="149" width="0.0573%" height="15" fill="rgb(222,148,37)" fg:x="3242" fg:w="2"/><text x="93.1972%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::sample_light (90 samples, 2.58%)</title><rect x="90.5103%" y="165" width="2.5803%" height="15" fill="rgb(234,67,33)" fg:x="3157" fg:w="90"/><text x="90.7603%" y="175.50">te..</text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::round_error::ApproxFloat::solve_quadratic (3 samples, 0.09%)</title><rect x="93.0046%" y="149" width="0.0860%" height="15" fill="rgb(247,98,35)" fg:x="3244" fg:w="3"/><text x="93.2546%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::sample_light_array (126 samples, 3.61%)</title><rect x="89.8509%" y="181" width="3.6124%" height="15" fill="rgb(247,138,52)" fg:x="3134" fg:w="126"/><text x="90.1009%" y="191.50">test..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::triangle::triangle_pack_baricentric_coorinates (13 samples, 0.37%)</title><rect x="93.0906%" y="165" width="0.3727%" height="15" fill="rgb(213,79,30)" fg:x="3247" fg:w="13"/><text x="93.3406%" y="175.50"></text></g><g><title>libsystem_m.dylib`__sincosf_stret (1 samples, 0.03%)</title><rect x="93.4633%" y="165" width="0.0287%" height="15" fill="rgb(246,177,23)" fg:x="3260" fg:w="1"/><text x="93.7133%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::BoundingVolumeTree::intersect (2 samples, 0.06%)</title><rect x="93.4920%" y="165" width="0.0573%" height="15" fill="rgb(230,62,27)" fg:x="3261" fg:w="2"/><text x="93.7420%" y="175.50"></text></g><g><title>libsystem_m.dylib`acos (1 samples, 0.03%)</title><rect x="93.6067%" y="149" width="0.0287%" height="15" fill="rgb(216,154,8)" fg:x="3265" fg:w="1"/><text x="93.8567%" y="159.50"></text></g><g><title>libsystem_m.dylib`atan2 (4 samples, 0.11%)</title><rect x="93.6353%" y="149" width="0.1147%" height="15" fill="rgb(244,35,45)" fg:x="3266" fg:w="4"/><text x="93.8853%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Mul&gt;::mul (6 samples, 0.17%)</title><rect x="93.7500%" y="149" width="0.1720%" height="15" fill="rgb(251,115,12)" fg:x="3270" fg:w="6"/><text x="94.0000%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::intersection::IntersectionInfo::new (1 samples, 0.03%)</title><rect x="93.9220%" y="149" width="0.0287%" height="15" fill="rgb(240,54,50)" fg:x="3276" fg:w="1"/><text x="94.1720%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`&lt;geometry3d::round_error::ApproxFloat as core::ops::arith::Div&gt;::div (1 samples, 0.03%)</title><rect x="95.1261%" y="133" width="0.0287%" height="15" fill="rgb(233,84,52)" fg:x="3318" fg:w="1"/><text x="95.3761%" y="143.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::sample_light (43 samples, 1.23%)</title><rect x="93.9507%" y="149" width="1.2328%" height="15" fill="rgb(207,117,47)" fg:x="3277" fg:w="43"/><text x="94.2007%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`geometry3d::round_error::ApproxFloat::solve_quadratic (1 samples, 0.03%)</title><rect x="95.1548%" y="133" width="0.0287%" height="15" fill="rgb(249,43,39)" fg:x="3319" fg:w="1"/><text x="95.4048%" y="143.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::trace_ray (67 samples, 1.92%)</title><rect x="93.4633%" y="181" width="1.9209%" height="15" fill="rgb(209,38,44)" fg:x="3260" fg:w="67"/><text x="93.7133%" y="191.50">t..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::sample_light_array (64 samples, 1.83%)</title><rect x="93.5493%" y="165" width="1.8349%" height="15" fill="rgb(236,212,23)" fg:x="3263" fg:w="64"/><text x="93.7993%" y="175.50">t..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::triangle::triangle_pack_baricentric_coorinates (7 samples, 0.20%)</title><rect x="95.1835%" y="149" width="0.2007%" height="15" fill="rgb(242,79,21)" fg:x="3320" fg:w="7"/><text x="95.4335%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::trace_ray (211 samples, 6.05%)</title><rect x="89.4495%" y="197" width="6.0493%" height="15" fill="rgb(211,96,35)" fg:x="3120" fg:w="211"/><text x="89.6995%" y="207.50">test_sce..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::triangle::triangle_pack_baricentric_coorinates (4 samples, 0.11%)</title><rect x="95.3842%" y="181" width="0.1147%" height="15" fill="rgb(253,215,40)" fg:x="3327" fg:w="4"/><text x="95.6342%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::sample_light (4 samples, 0.11%)</title><rect x="95.4989%" y="197" width="0.1147%" height="15" fill="rgb(211,81,21)" fg:x="3331" fg:w="4"/><text x="95.7489%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::trace_ray (2,389 samples, 68.49%)</title><rect x="31.0780%" y="213" width="68.4920%" height="15" fill="rgb(208,190,38)" fg:x="1084" fg:w="2389"/><text x="31.3280%" y="223.50">test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::trace_ray</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::triangle::triangle_pack_baricentric_coorinates (138 samples, 3.96%)</title><rect x="95.6135%" y="197" width="3.9564%" height="15" fill="rgb(235,213,38)" fg:x="3335" fg:w="138"/><text x="95.8635%" y="207.50">test..</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::sample_light (2 samples, 0.06%)</title><rect x="99.5700%" y="213" width="0.0573%" height="15" fill="rgb(237,122,38)" fg:x="3473" fg:w="2"/><text x="99.8200%" y="223.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::render (3,473 samples, 99.57%)</title><rect x="0.0860%" y="245" width="99.5700%" height="15" fill="rgb(244,218,35)" fg:x="3" fg:w="3473"/><text x="0.3360%" y="255.50">test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::render</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::trace_ray (3,439 samples, 98.60%)</title><rect x="1.0608%" y="229" width="98.5952%" height="15" fill="rgb(240,68,47)" fg:x="37" fg:w="3439"/><text x="1.3108%" y="239.50">test_scenes-bd877bf15bf1135c`rendering::ray_tracer::RayTracer::trace_ray</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::triangle::triangle_pack_baricentric_coorinates (1 samples, 0.03%)</title><rect x="99.6273%" y="213" width="0.0287%" height="15" fill="rgb(210,16,53)" fg:x="3475" fg:w="1"/><text x="99.8773%" y="223.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="99.6560%" y="213" width="0.0287%" height="15" fill="rgb(235,124,12)" fg:x="3476" fg:w="1"/><text x="99.9060%" y="223.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="99.6560%" y="197" width="0.0287%" height="15" fill="rgb(224,169,11)" fg:x="3476" fg:w="1"/><text x="99.9060%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="99.6846%" y="165" width="0.0573%" height="15" fill="rgb(250,166,2)" fg:x="3477" fg:w="2"/><text x="99.9346%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="99.6846%" y="149" width="0.0573%" height="15" fill="rgb(242,216,29)" fg:x="3477" fg:w="2"/><text x="99.9346%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (2 samples, 0.06%)</title><rect x="99.6846%" y="133" width="0.0573%" height="15" fill="rgb(230,116,27)" fg:x="3477" fg:w="2"/><text x="99.9346%" y="143.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="99.7133%" y="117" width="0.0287%" height="15" fill="rgb(228,99,48)" fg:x="3478" fg:w="1"/><text x="99.9633%" y="127.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="99.7133%" y="101" width="0.0287%" height="15" fill="rgb(253,11,6)" fg:x="3478" fg:w="1"/><text x="99.9633%" y="111.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::recurse (1 samples, 0.03%)</title><rect x="99.7706%" y="149" width="0.0287%" height="15" fill="rgb(247,143,39)" fg:x="3480" fg:w="1"/><text x="100.0206%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::shift_tail (1 samples, 0.03%)</title><rect x="99.7706%" y="133" width="0.0287%" height="15" fill="rgb(236,97,10)" fg:x="3480" fg:w="1"/><text x="100.0206%" y="143.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`core::slice::sort::choose_pivot::_{{closure}} (1 samples, 0.03%)</title><rect x="99.7993%" y="101" width="0.0287%" height="15" fill="rgb(233,208,19)" fg:x="3481" fg:w="1"/><text x="100.0493%" y="111.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::scene::Scene::build_accelerator (11 samples, 0.32%)</title><rect x="99.6560%" y="245" width="0.3154%" height="15" fill="rgb(216,164,2)" fg:x="3476" fg:w="11"/><text x="99.9060%" y="255.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (11 samples, 0.32%)</title><rect x="99.6560%" y="229" width="0.3154%" height="15" fill="rgb(220,129,5)" fg:x="3476" fg:w="11"/><text x="99.9060%" y="239.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (10 samples, 0.29%)</title><rect x="99.6846%" y="213" width="0.2867%" height="15" fill="rgb(242,17,10)" fg:x="3477" fg:w="10"/><text x="99.9346%" y="223.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (10 samples, 0.29%)</title><rect x="99.6846%" y="197" width="0.2867%" height="15" fill="rgb(242,107,0)" fg:x="3477" fg:w="10"/><text x="99.9346%" y="207.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (10 samples, 0.29%)</title><rect x="99.6846%" y="181" width="0.2867%" height="15" fill="rgb(251,28,31)" fg:x="3477" fg:w="10"/><text x="99.9346%" y="191.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (8 samples, 0.23%)</title><rect x="99.7420%" y="165" width="0.2294%" height="15" fill="rgb(233,223,10)" fg:x="3479" fg:w="8"/><text x="99.9920%" y="175.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (6 samples, 0.17%)</title><rect x="99.7993%" y="149" width="0.1720%" height="15" fill="rgb(215,21,27)" fg:x="3481" fg:w="6"/><text x="100.0493%" y="159.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (6 samples, 0.17%)</title><rect x="99.7993%" y="133" width="0.1720%" height="15" fill="rgb(232,23,21)" fg:x="3481" fg:w="6"/><text x="100.0493%" y="143.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (6 samples, 0.17%)</title><rect x="99.7993%" y="117" width="0.1720%" height="15" fill="rgb(244,5,23)" fg:x="3481" fg:w="6"/><text x="100.0493%" y="127.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (5 samples, 0.14%)</title><rect x="99.8280%" y="101" width="0.1433%" height="15" fill="rgb(226,81,46)" fg:x="3482" fg:w="5"/><text x="100.0780%" y="111.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (5 samples, 0.14%)</title><rect x="99.8280%" y="85" width="0.1433%" height="15" fill="rgb(247,70,30)" fg:x="3482" fg:w="5"/><text x="100.0780%" y="95.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (5 samples, 0.14%)</title><rect x="99.8280%" y="69" width="0.1433%" height="15" fill="rgb(212,68,19)" fg:x="3482" fg:w="5"/><text x="100.0780%" y="79.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (5 samples, 0.14%)</title><rect x="99.8280%" y="53" width="0.1433%" height="15" fill="rgb(240,187,13)" fg:x="3482" fg:w="5"/><text x="100.0780%" y="63.50"></text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::bvh::Node::recursive_build (3 samples, 0.09%)</title><rect x="99.8853%" y="37" width="0.0860%" height="15" fill="rgb(223,113,26)" fg:x="3484" fg:w="3"/><text x="100.1353%" y="47.50"></text></g><g><title>all (3,488 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="3488"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,487 samples, 99.97%)</title><rect x="0.0287%" y="373" width="99.9713%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,487 samples, 99.97%)</title><rect x="0.0287%" y="357" width="99.9713%" height="15" fill="rgb(247,173,49)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>test_scenes-bd877bf15bf1135c`std::sys::unix::thread::Thread::new::thread_start (3,487 samples, 99.97%)</title><rect x="0.0287%" y="341" width="99.9713%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="351.50">test_scenes-bd877bf15bf1135c`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>test_scenes-bd877bf15bf1135c`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,487 samples, 99.97%)</title><rect x="0.0287%" y="325" width="99.9713%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="335.50">test_scenes-bd877bf15bf1135c`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>test_scenes-bd877bf15bf1135c`std::sys_common::backtrace::__rust_begin_short_backtrace (3,487 samples, 99.97%)</title><rect x="0.0287%" y="309" width="99.9713%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="319.50">test_scenes-bd877bf15bf1135c`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test_scenes-bd877bf15bf1135c`test::run_test::run_test_inner::_{{closure}} (3,487 samples, 99.97%)</title><rect x="0.0287%" y="293" width="99.9713%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="303.50">test_scenes-bd877bf15bf1135c`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>test_scenes-bd877bf15bf1135c`test::__rust_begin_short_backtrace (3,487 samples, 99.97%)</title><rect x="0.0287%" y="277" width="99.9713%" height="15" fill="rgb(205,117,38)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="287.50">test_scenes-bd877bf15bf1135c`test::__rust_begin_short_backtrace</text></g><g><title>test_scenes-bd877bf15bf1135c`core::ops::function::FnOnce::call_once (3,487 samples, 99.97%)</title><rect x="0.0287%" y="261" width="99.9713%" height="15" fill="rgb(237,72,25)" fg:x="1" fg:w="3487"/><text x="0.2787%" y="271.50">test_scenes-bd877bf15bf1135c`core::ops::function::FnOnce::call_once</text></g><g><title>test_scenes-bd877bf15bf1135c`rendering::scene::Scene::push_object (1 samples, 0.03%)</title><rect x="99.9713%" y="245" width="0.0287%" height="15" fill="rgb(244,70,9)" fg:x="3487" fg:w="1"/><text x="100.2213%" y="255.50"></text></g></svg></svg>